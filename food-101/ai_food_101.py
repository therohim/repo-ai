# -*- coding: utf-8 -*-
"""AI Food 101.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M9nBvIOilt55ryW7s0lbpoYzfdWYqPgz
"""

!pip install kaggle

import tensorflow as tf
print("GPU available:", tf.config.list_physical_devices('GPU'))

!kaggle datasets download -d prathmeshgodse/food101-zip -p /content/food101 --unzip

"""### **Preparation For Dataset food101**"""

import tensorflow as tf
from tensorflow.keras.preprocessing import image_dataset_from_directory

# Path ke dataset
dataset_dir = "/content/food101/food-101/"

IMG_SIZE = 224
BATCH_SIZE = 32

# Load training dataset
ds_train = image_dataset_from_directory(
    dataset_dir + "train",
    image_size=(IMG_SIZE, IMG_SIZE),
    batch_size=32,
    label_mode="categorical"  # Bisa "categorical", "binary", atau "int"
)

# Load test dataset
ds_test = image_dataset_from_directory(
    dataset_dir + "test",
    image_size=(IMG_SIZE, IMG_SIZE),
    batch_size=32,
    label_mode="categorical"
)

# Cek beberapa sampel
for images, labels in ds_train.take(1):
    print("Batch image shape:", images.shape)
    print("Batch label shape:", labels.shape)

class_labels = ds_train.class_names

"""Data augmentation sangat penting untuk memperkaya dataset dan membantu model dalam belajar berbagai variasi dari gambar. Beberapa teknik augmentasi yang bisa dicoba adalah:

Rotasi, zoom, flip, dan shear
Random contrast, brightness, dan saturation
"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Augmentasi data
datagen = ImageDataGenerator(
    rotation_range=40,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Terapkan augmentasi data pada training data
datagen.fit(ds_train)

"""### **Build a CNN Model with Learning Transfer**

Jika model Anda memiliki arsitektur yang cukup sederhana, Anda bisa mencoba model yang lebih dalam atau menggunakan pretrained models seperti ResNet50, VGG16, atau EfficientNet yang sudah terlatih pada dataset besar dan kemudian disesuaikan dengan dataset Anda.

Contoh penggunaan Transfer Learning dengan model EfficientNet
"""

from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout

# Load pre-trained EfficientNetB0 tanpa lapisan akhir
base_model = EfficientNetB0(weights="imagenet", include_top=False, input_shape=(IMG_SIZE, IMG_SIZE, 3))
base_model.trainable = False  # Bekukan bobot pre-trained model

# Tambahkan lapisan tambahan untuk klasifikasi makanan
model = Sequential([
    base_model,
    GlobalAveragePooling2D(),
    Dropout(0.5),
    Dense(1024, activation='relu'),
    Dense(len(class_labels), activation="softmax"),
])

# Compile model
model.compile(optimizer="adam", loss="categorical_crossentropy", metrics=["accuracy"])

# Tampilkan arsitektur model
model.summary()

from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# Callback untuk menghentikan training jika loss tidak membaik
early_stopping = EarlyStopping(monitor="val_loss", patience=5, restore_best_weights=True)

# Simpan model terbaik
model_checkpoint = ModelCheckpoint("best_food101_model.keras", save_best_only=True, save_format="keras")

# Latih model
history = model.fit(ds_train, validation_data=ds_test, epochs=20, callbacks=[early_stopping, model_checkpoint])

test_loss, test_acc = model.evaluate(ds_test)
print(f"Test Accuracy: {test_acc * 100:.2f}%")

"""## **Predicted the Image**"""

import numpy as np
import matplotlib.pyplot as plt
import os

def get_class_labels_from_directory(directory):
    # Ambil nama subfolder sebagai label
    return sorted([folder for folder in os.listdir(directory) if os.path.isdir(os.path.join(directory, folder))])

def predict_image(image_path, class_labels):
    image = tf.keras.preprocessing.image.load_img(image_path, target_size=(IMG_SIZE, IMG_SIZE))
    image_array = tf.keras.preprocessing.image.img_to_array(image) / 255.0
    image_array = np.expand_dims(image_array, axis=0)

    print(hasattr(model, 'class_names'))
    prediction = model.predict(image_array)
    predicted_index = np.argmax(prediction)
    probability = np.max(prediction) * 100
    predicted_label = class_labels[predicted_index]

    # Tampilkan gambar dan hasil prediksi
    plt.imshow(image)
    plt.title(f"Predicted: {predicted_label} ({probability:.2f}%)")
    # plt.title(f"Predicted: {predicted_label}")
    plt.axis("off")
    plt.show()


# model = tf.keras.models.load_model("/content/best_food101_model.h5")

# Cek apakah model memiliki class_names
if hasattr(model, 'class_names'):
    class_labels = model.class_names
else:
    # Jika tidak ada, ambil class labels dari direktori dataset
    class_labels = get_class_labels_from_directory("/content/food101/food-101/train")


predict_image("/content/5cb72ada016b64da8adc7a52.w800.jpg", class_labels)

